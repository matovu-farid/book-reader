events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Upstream for the proxy service
    upstream openai_proxy {
        server openai-tts-proxy:5458 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name _;

        # Health check for nginx itself
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Default location - return 404 for unmatched routes
        location / {
            return 404 '{"error": "Not found", "message": "Route not found"}';
            add_header Content-Type application/json;
        }

        # Specific route for OpenAI API calls
        location /api/openai {
            # Apply rate limiting
            limit_req zone=api burst=20 nodelay;

            # Proxy settings
            proxy_pass http://openai_proxy;
            proxy_http_version 1.0;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle streaming responses
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Handle errors
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;

            # Error page for when proxy service is unavailable
            error_page 502 503 504 /proxy-unavailable;
        }

        # Health check for the proxy service
        location /health {
            proxy_pass http://openai_proxy/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle errors when proxy service is unavailable
            error_page 502 503 504 /proxy-unavailable;
        }

        # Handle /api/openai/health specifically
        location /api/openai/health {
            proxy_pass http://openai_proxy/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle errors when proxy service is unavailable
            error_page 502 503 504 /proxy-unavailable;
        }

        # Error page for when proxy service is unavailable
        location = /proxy-unavailable {
            internal;
            return 503 '{"error": "Service unavailable", "message": "OpenAI proxy service is not available", "status": 503}';
            add_header Content-Type application/json;
        }
    }
}
